{
"#desc"
:
""
,
"user"
:
{
"#desc"
:
"user"
,
"info"
:
{
"#desc"
:
"Show information"
,
"#1"
:
{
"#desc"
:
"Username, if not set, show the user information of current owner, or owner of this token"
}
}
,
"email"
:
{
"#desc"
:
"get current user email"
}
,
"search"
:
{
"#desc"
:
"search a user"
,
"#1"
:
{
"#desc"
:
"Username"
}
}
}
,
"project"
:
{
"#desc"
:
"project command"
,
"create"
:
{
"#desc"
:
"Create project"
,
"-p|--path"
:
{
"#desc"
:
"project path"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--namespace_id"
:
{
"#desc"
:
"Namespace for the new project"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--access"
:
{
"#desc"
:
"See project visibility level."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
"public"
,
"private"
]
}
}
,
"--default_branch"
:
{
"#desc"
:
"The default branch name."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Short project description."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--template_name"
:
{
"#desc"
:
"When used without use_custom_template, name of a built-in project template."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tag_list"
:
{
"#desc"
:
"The list of tags for a project"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--template_project_id"
:
{
"#desc"
:
"When used with use_custom_template, project ID of a custom project template."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_storage"
:
{
"#desc"
:
"Which storage shard the repository is on."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--pages_access_level"
:
{
"#desc"
:
"Pages access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issues_access_level"
:
{
"#desc"
:
"Issues access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--import_url"
:
{
"#desc"
:
"URL to import repository from."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_method"
:
{
"#desc"
:
"Set the merge method used."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_timeout"
:
{
"#desc"
:
"The maximum amount of time, in seconds, that a job can run."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_option"
:
{
"#desc"
:
"One of never, always, default_on, or default_off."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ci_config_path"
:
{
"#desc"
:
"The path to CI configuration file."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--wiki_access_level"
:
{
"#desc"
:
"wiki access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_git_strategy"
:
{
"#desc"
:
"The Git strategy. Defaults to fetch."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--topics"
:
{
"#desc"
:
"The list of topics for a project"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--avatar"
:
{
"#desc"
:
"Image file for avatar of the project."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--builds_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--forking_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--snippets_access_level"
:
{
"#desc"
:
"Snippets access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--analytics_access_level"
:
{
"#desc"
:
"One of disabled, private or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--approvals_before_merge"
:
{
"#desc"
:
"How many approvers should approve merge requests by default"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_access_level"
:
{
"#desc"
:
"Repository access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--operations_access_level"
:
{
"#desc"
:
"Operations access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--requirements_access_level"
:
{
"#desc"
:
"Requirements access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--auto_devops_deploy_strategy"
:
{
"#desc"
:
"Auto Deploy strategy"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_requests_access_level"
:
{
"#desc"
:
"Merge requests access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_registry_access_level"
:
{
"#desc"
:
"Set visibility of container registry, for this project"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--group_with_project_templates_id"
:
{
"#desc"
:
"specifies ID of group from which all the custom project templates are sourced."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--security_and_compliance_access_level"
:
{
"#desc"
:
"Security and compliance access level."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_expiration_policy_attributes"
:
{
"#desc"
:
"Update the image cleanup policy for this project. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--external_authorization_classification_label"
:
{
"#desc"
:
"The classification label for the project."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--mirror"
:
{
"#desc"
:
"Enables pull mirroring in a project."
}
,
"--lfs_enabled"
:
{
"#desc"
:
"Enable LFS."
}
,
"--jobs_enabled"
:
{
"#desc"
:
"Enable jobs for this project."
}
,
"--wiki_enabled"
:
{
"#desc"
:
"Enable wiki for this project. Use wiki_access_level instead."
}
,
"--public_builds"
:
{
"#desc"
:
"If true, jobs can be viewed by non-project members."
}
,
"--issues_enabled"
:
{
"#desc"
:
"Enable issues for this project."
}
,
"--emails_disabled"
:
{
"#desc"
:
"Disable email notifications."
}
,
"--snippets_enabled"
:
{
"#desc"
:
"Enable snippets for this project. "
}
,
"--packages_enabled"
:
{
"#desc"
:
"Enable or disable packages repository feature."
}
,
"--auto_devops_enabled"
:
{
"#desc"
:
"Enable Auto DevOps for this project."
}
,
"--use_custom_template"
:
{
"#desc"
:
"Use either custom instance or group project template."
}
,
"--merge_trains_enabled"
:
{
"#desc"
:
"Enable or disable merge trains."
}
,
"--mirror_trigger_builds"
:
{
"#desc"
:
"Pull mirroring triggers builds."
}
,
"--initialize_with_readme"
:
{
"#desc"
:
"Whether to create a Git repository with just a README.md file"
}
,
"--shared_runners_enabled"
:
{
"#desc"
:
"Enable shared runners for this project."
}
,
"--request_access_enabled"
:
{
"#desc"
:
"Allow users to request member access."
}
,
"--merge_requests_enabled"
:
{
"#desc"
:
"Enable merge requests for this project."
}
,
"--merge_pipelines_enabled"
:
{
"#desc"
:
"Enable or disable merge pipelines."
}
,
"--container_registry_enabled"
:
{
"#desc"
:
"Enable container registry for this project."
}
,
"--autoclose_referenced_issues"
:
{
"#desc"
:
"Set whether auto-closing referenced issues on default branch."
}
,
"--auto_cancel_pending_pipelines"
:
{
"#desc"
:
"Auto-cancel pending pipelines."
}
,
"--allow_merge_on_skipped_pipeline"
:
{
"#desc"
:
"Set whether or not merge requests can be merged with skipped jobs."
}
,
"--remove_source_branch_after_merge"
:
{
"#desc"
:
"Enable Delete source branch option by default for all new merge requests."
}
,
"--resolve_outdated_diff_discussions"
:
{
"#desc"
:
"Automatically resolve merge request diffs discussions on lines changed with a push."
}
,
"--printing_merge_request_link_enabled"
:
{
"#desc"
:
"Show link to create/view merge request when pushing from the command line."
}
,
"--only_allow_merge_if_pipeline_succeeds"
:
{
"#desc"
:
"Set whether merge requests can only be merged with successful pipelines."
}
,
"--only_allow_merge_if_all_discussions_are_resolved"
:
{
"#desc"
:
"Set whether merge requests can only be merged when all the discussions are resolved."
}
,
"#1"
:
{
"#desc"
:
"project names"
}
}
,
"ls"
:
{
"#desc"
:
"List project of owner"
}
,
"info"
:
{
"#desc"
:
"Show detailed information of project"
,
"--license"
:
{
"#desc"
:
"Include project license data."
}
,
"--statistics"
:
{
"#desc"
:
"Include project statistics. Only available to Reporter or higher level role members."
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response. (administrator only)"
}
,
"#1|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project."
}
}
,
"update"
:
{
"#desc"
:
"Setup project configure"
,
"--analytics_access_level"
:
{
"#desc"
:
"One of disabled, private or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"disabled"
}
}
,
"--approvals_before_merge"
:
{
"#desc"
:
"How many approvers should approve merge request by default. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
" "
}
}
,
"--auto_cancel_pending_pipelines"
:
{
"#desc"
:
"Auto-cancel pending pipelines. This isnâ€™t a boolean, but enabled/disabled. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--auto_devops_deploy_strategy"
:
{
"#desc"
:
"Auto Deploy strategy (continuous, manual, or timed_incremental) "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--avatar"
:
{
"#desc"
:
"Image file for avatar of the project."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_git_strategy"
:
{
"#desc"
:
"The Git strategy. Defaults to fetch"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--build_timeout"
:
{
"#desc"
:
"The maximum amount of time, in seconds, that a job can run."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
" "
}
}
,
"--builds_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ci_config_path"
:
{
"#desc"
:
"The path to CI configuration file."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--ci_default_git_depth"
:
{
"#desc"
:
"Default number of revisions for shallow cloning."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_expiration_policy_attributes"
:
{
"#desc"
:
"Update the image cleanup policy for this project. Accepts: (string), (integer), (string), (string), (string), (string), (boolean). "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--container_registry_access_level"
:
{
"#desc"
:
"Set visibility of container registry, for this project, to one of , or . disabled private enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--default_branch"
:
{
"#desc"
:
"The default branch name."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"Short project description."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--external_authorization_classification_label"
:
{
"#desc"
:
"The classification label for the project."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--forking_access_level"
:
{
"#desc"
:
"The classification label for the project."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--import_url"
:
{
"#desc"
:
"URL the repository was imported from."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issues_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issues_enabled"
:
{
"#desc"
:
"Set the merge method used."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_requests_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_requests_template"
:
{
"#desc"
:
"Default description for merge requests. Description is parsed with gcode Flavored Markdown."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--mirror_user_id"
:
{
"#desc"
:
"User responsible for all the activity surrounding a pull mirror event. (administrators only)"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The name of the project"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--operations_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--pages_access_level"
:
{
"#desc"
:
"One of disabled, private, enabled, or public."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--path"
:
{
"#desc"
:
"Custom repository name for the project. By default generated based on name."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--repository_storage"
:
{
"#desc"
:
"Which storage shard the repository is on. (administrators only)"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--requirements_access_level"
:
{
"#desc"
:
"One of disabled, private, enabled or public"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--security_and_compliance_access_level"
:
{
"#desc"
:
"Security and compliance access level. One of disabled, private, or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--snippets_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_commit_template"
:
{
"#desc"
:
"Template used to create squash commit message in merge requests"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--squash_option"
:
{
"#desc"
:
"One of never, always, default_on, or default_off"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--suggestion_commit_message"
:
{
"#desc"
:
"The commit message used to apply merge request suggestions."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tag_list"
:
{
"#desc"
:
"(Deprecated in gcode 14.0) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use instead."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--topics"
:
{
"#desc"
:
"The list of topics for the project. This replaces any existing topics that are already added to the project. (Introduced in gcode 14.0.)."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--visibility"
:
{
"#desc"
:
"See project visibility level."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--wiki_access_level"
:
{
"#desc"
:
"One of disabled, private, or enabled"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"disabled"
}
}
,
"--wiki_enabled"
:
{
"#desc"
:
"(Deprecated) Enable wiki for this project. Use instead. wiki_access_level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--allow_merge_on_skipped_pipeline"
:
{
"#desc"
:
"Set whether or not merge requests can be merged with skipped jobs."
}
,
"--auto_devops_enabled"
:
{
"#desc"
:
"Enable Auto DevOps for this project. "
}
,
"--autoclose_referenced_issues"
:
{
"#desc"
:
"Set whether auto-closing referenced issues on default branch "
}
,
"--ci_forward_deployment_enabled"
:
{
"#desc"
:
"When a new deployment job starts, skip older deployment jobs that are still pending."
}
,
"--ci_separated_caches"
:
{
"#desc"
:
"Set whether or not caches should be separated by branch protection status."
}
,
"--container_registry_enabled"
:
{
"#desc"
:
"(Deprecated) Enable container registry for this project. Use instead."
}
,
"--emails_disabled"
:
{
"#desc"
:
"Disable email notifications.."
}
,
"--merge_pipelines_enabled"
:
{
"#desc"
:
"Enable or disable merge pipelines.."
}
,
"--merge_requests_enabled"
:
{
"#desc"
:
"(Deprecated) Enable merge requests for this project. Use instead."
}
,
"--merge_trains_enabled"
:
{
"#desc"
:
"Enable or disable merge trains.."
}
,
"--mirror_overwrites_diverged_branches"
:
{
"#desc"
:
"Pull mirror overwrites diverged branches."
}
,
"--mirror_trigger_builds"
:
{
"#desc"
:
"mirror_trigger_builds"
}
,
"--mirror"
:
{
"#desc"
:
"Enables pull mirroring in a project"
}
,
"--mr_default_target_self"
:
{
"#desc"
:
"For forked projects, target merge requests to this project. If false, the target will be the upstream project"
}
,
"--only_allow_merge_if_pipeline_succeeds"
:
{
"#desc"
:
"Set whether merge requests can only be merged with successful jobs."
}
,
"--only_mirror_protected_branches"
:
{
"#desc"
:
"Only mirror protected branches."
}
,
"--packages_enabled"
:
{
"#desc"
:
"Enable or disable packages repository feature."
}
,
"--printing_merge_request_link_enabled"
:
{
"#desc"
:
"Show link to create/view merge request when pushing from the command line."
}
,
"--public_builds"
:
{
"#desc"
:
"If true, jobs can be viewed by non-project members"
}
,
"--remove_source_branch_after_merge"
:
{
"#desc"
:
"Enable option by default for all new merge requests.Delete source branch "
}
,
"--request_access_enabled"
:
{
"#desc"
:
"Allow users to request member access."
}
,
"--resolve_outdated_diff_discussions"
:
{
"#desc"
:
"Automatically resolve merge request diffs discussions on lines changed with a push."
}
,
"--restrict_user_defined_variables"
:
{
"#desc"
:
"Allow only users with the Maintainer role to pass user-defined variables when triggering a pipeline."
}
,
"--service_desk_enabled"
:
{
"#desc"
:
"Enable or disable Service Desk feature."
}
,
"--shared_runners_enabled"
:
{
"#desc"
:
"Enable shared runners for this project."
}
,
"--snippets_enabled"
:
{
"#desc"
:
"(Deprecated) Enable snippets for this project. Use instead. snippets_access_level"
}
,
"#1|--project|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project."
}
}
,
"rm"
:
{
"#desc"
:
"Remove project"
,
"#1|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project."
}
}
,
"issue"
:
{
"#desc"
:
"project issue list"
,
"--assignee_id"
:
{
"#desc"
:
"Return issues assigned to the given user id."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_username"
:
{
"#desc"
:
"Return issues assigned to the given username."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return issues created by the given user id."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return issues created by the given username."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return issues created on or after the given time. Expected in ISO 8601 format"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return issues created on or before the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"Return issues associated with the given epic ID."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return only the issues having the given iid"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project owned by the authenticated user"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"Filter to a given type of issue. One of issue, incident, or test_case."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_id"
:
{
"#desc"
:
"Return issues assigned to the given iteration ID."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_title"
:
{
"#desc"
:
"Return issues assigned to the iteration with the given title."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated list of label names, issues must have all labels to be returned. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone"
:
{
"#desc"
:
"The milestone title. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return issues reacted by the authenticated user by the given emoji. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--not"
:
{
"#desc"
:
"Return issues that do not match the parameters supplied. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return issues for the given scope:"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return issues sorted in asc or desc order. Default is desc"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search group issues against their title and description"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state"
:
{
"#desc"
:
"Return all issues or just those that are opened or closed"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return issues updated on or after the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return issues updated on or before the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"Return issues with the specified weight."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Filter confidential or public issues."
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
}
}
,
"member"
:
{
"#desc"
:
"project member manage"
,
"ls"
:
{
"#desc"
:
"List project member"
,
"--search"
:
{
"#desc"
:
"Search for specific users."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_users"
:
{
"#desc"
:
"Filter out users with the specified ID."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"#1|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project."
}
}
,
"user"
:
{
"#desc"
:
"Show project member user info"
,
"--user_id"
:
{
"#desc"
:
"The user ID of the member"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"#1|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project."
}
}
,
"add"
:
{
"#desc"
:
"Add project member"
,
"--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--expires_at"
:
{
"#desc"
:
"A date string in the format YEAR-MONTH-DAY"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--access_level"
:
{
"#desc"
:
"A valid access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--invite_source"
:
{
"#desc"
:
"The source of the invitation that starts the member creation process."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tasks_to_be_done"
:
{
"#desc"
:
"Tasks the inviter wants the member to focus on."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tasks_project_id"
:
{
"#desc"
:
"The project ID in which to create the task issues."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"#1|--user_id"
:
{
"#desc"
:
"The user ID of the new member or multiple IDs separated by commas"
}
}
,
"rm"
:
{
"#desc"
:
"Remove member"
,
"--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the group"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_subresources"
:
{
"#desc"
:
""
}
,
"--unassign_issuables"
:
{
"#desc"
:
""
}
,
"#n|--user_id"
:
{
"#desc"
:
"The user ID of the member"
}
}
}
}
,
"config"
:
{
"#desc"
:
"save, load, which"
,
"which"
:
{
"#desc"
:
"Show current config path"
}
,
"get"
:
{
"#desc"
:
"Print the value of a given configuration key"
,
"--host"
:
{
"#desc"
:
"host name"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"gitcode.net"
}
}
,
"#1"
:
{
"#desc"
:
"The name of the configuration to get"
,
"#cand"
:
[
"oauth_token"
,
"user"
,
"git_protocol"
]
}
}
,
"set"
:
{
"#desc"
:
"Update configuration with a value for the given key"
,
"--host"
:
{
"#desc"
:
"host name"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"gitcode.net"
}
}
,
"#1"
:
{
"#desc"
:
"Please provide configuration key"
,
"#cand"
:
[
"oauth_token"
,
"user"
,
"git_protocol"
]
}
,
"#2"
:
{
"#desc"
:
"Please provide configuration val"
}
}
}
,
"current"
:
{
"#desc"
:
"current user"
,
"owner"
:
{
"#desc"
:
"Get current owner"
}
}
,
"groups"
:
{
"#desc"
:
"groups manage"
,
"ls"
:
{
"#desc"
:
"List all groups"
,
"--sort"
:
{
"#desc"
:
"Order groups in asc or desc order."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Return the list of authorized groups matching the search criteria"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Order groups by"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_groups"
:
{
"#desc"
:
"Skip the group IDs passed"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--min_access_level"
:
{
"#desc"
:
"Limit to groups where current user has at least this access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--per_page"
:
{
"#desc"
:
"Results per page (max 100)"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--page"
:
{
"#desc"
:
"Page number of the results to fetch."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--owned"
:
{
"#desc"
:
"Limit to groups explicitly owned by the current user"
}
,
"--statistics"
:
{
"#desc"
:
"Include group statistics"
}
,
"--all_available"
:
{
"#desc"
:
"Show all the groups you have access to"
}
,
"--top_level_only"
:
{
"#desc"
:
"Limit to top level groups, excluding all subgroups"
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response"
}
}
,
"info"
:
{
"#desc"
:
"Show groups information"
,
"--with_projects"
:
{
"#desc"
:
"Include details from projects that belong to the specified group"
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response"
}
,
"#1|--groups"
:
{
"#desc"
:
"The ID or URL-encoded path of the group"
}
}
,
"create"
:
{
"#desc"
:
"Create groups"
,
"-p|--path"
:
{
"#desc"
:
"groups path"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The group description."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--visibility"
:
{
"#desc"
:
"The groups visibility."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"private"
,
"internal"
,
"public"
]
}
}
,
"--subgroup_creation_level"
:
{
"#desc"
:
"Allowed to create subgroups."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"maintainer"
,
"owner"
]
}
}
,
"#1"
:
{
"#desc"
:
"groups name"
}
}
,
"member"
:
{
"#desc"
:
"groups member manage"
,
"ls"
:
{
"#desc"
:
"List member"
,
"--query"
:
{
"#desc"
:
"A query string to search for members"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--user_ids"
:
{
"#desc"
:
"Filter the results on the given user IDs"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"#1|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the group."
}
}
,
"user"
:
{
"#desc"
:
"Show groups member user info"
,
"--user_id"
:
{
"#desc"
:
"The user ID of the member"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"#1|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the group."
}
}
,
"add"
:
{
"#desc"
:
"Add member"
,
"--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the group"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--expires_at"
:
{
"#desc"
:
"A date string in the format YEAR-MONTH-DAY"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--access_level"
:
{
"#desc"
:
"A valid access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--invite_source"
:
{
"#desc"
:
"The source of the invitation that starts the member creation process."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tasks_to_be_done"
:
{
"#desc"
:
"Tasks the inviter wants the member to focus on."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--tasks_project_id"
:
{
"#desc"
:
"The project ID in which to create the task issues."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"#1|--user_id"
:
{
"#desc"
:
"The user ID of the new member or multiple IDs separated by commas"
}
}
,
"rm"
:
{
"#desc"
:
"Remove member"
,
"--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the group"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_subresources"
:
{
"#desc"
:
""
}
,
"--unassign_issuables"
:
{
"#desc"
:
""
}
,
"#n|--user_id"
:
{
"#desc"
:
"The user ID of the member"
}
}
}
,
"update"
:
{
"#desc"
:
"Update group"
,
"-p|--path"
:
{
"#desc"
:
"groups path"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"The name of the group"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The group description."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--visibility"
:
{
"#desc"
:
"The groups visibility."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"private"
,
"internal"
,
"public"
]
}
}
,
"--subgroup_creation_level"
:
{
"#desc"
:
"Allowed to create subgroups."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#cand"
:
[
""
,
"maintainer"
,
"owner"
]
}
}
,
"#1"
:
{
"#desc"
:
"The ID of the group."
}
}
,
"issue"
:
{
"#desc"
:
"groups issue list"
,
"--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project owned by the authenticated user"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"Return issues assigned to the given user id."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_username"
:
{
"#desc"
:
"Return issues assigned to the given username."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return issues created by the given user id."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return issues created by the given username."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return issues created on or after the given time. Expected in ISO 8601 format"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return issues created on or before the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"Return issues associated with the given epic ID."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return only the issues having the given iid"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"Filter to a given type of issue. One of issue, incident, or test_case."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_id"
:
{
"#desc"
:
"Return issues assigned to the given iteration ID."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_title"
:
{
"#desc"
:
"Return issues assigned to the iteration with the given title."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated list of label names, issues must have all labels to be returned. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone"
:
{
"#desc"
:
"The milestone title. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return issues reacted by the authenticated user by the given emoji. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--not"
:
{
"#desc"
:
"Return issues that do not match the parameters supplied. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return issues for the given scope:"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return issues sorted in asc or desc order. Default is desc"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search group issues against their title and description"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state"
:
{
"#desc"
:
"Return all issues or just those that are opened or closed"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return issues updated on or after the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return issues updated on or before the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"Return issues with the specified weight."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Filter confidential or public issues."
}
,
"--non_archived"
:
{
"#desc"
:
"Return issues only from non-archived projects.If false,the response returns issues from both archived and non-archived projects.Default is true"
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
}
}
,
"repo"
:
{
"#desc"
:
"group repo mange"
,
"ls"
:
{
"#desc"
:
"list repo"
,
"--page"
:
{
"#desc"
:
"page"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"1"
}
}
,
"--per_page"
:
{
"#desc"
:
"per_page"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
,
"#default"
:
"20"
}
}
,
"--visibility"
:
{
"#desc"
:
"Limit by visibility"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--archived"
:
{
"#desc"
:
"Limit by archived status"
}
,
"#1|--id"
:
{
"#desc"
:
"The ID or group path"
}
}
}
}
,
"subgroup"
:
{
"#desc"
:
"subgroups manage"
,
"ls"
:
{
"#desc"
:
"List all subgroups"
,
"--sort"
:
{
"#desc"
:
"Order groups in asc or desc order."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Return the list of authorized groups matching the search criteria"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Order groups by"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--skip_groups"
:
{
"#desc"
:
"Skip the group IDs passed"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--min_access_level"
:
{
"#desc"
:
"Limit to groups where current user has at least this access level"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--owned"
:
{
"#desc"
:
"Limit to groups explicitly owned by the current user"
}
,
"--statistics"
:
{
"#desc"
:
"Include group statistics"
}
,
"--all_available"
:
{
"#desc"
:
"Show all the groups you have access to"
}
,
"--top_level_only"
:
{
"#desc"
:
"Limit to top level groups, excluding all subgroups"
}
,
"--with_custom_attributes"
:
{
"#desc"
:
"Include custom attributes in response"
}
,
"#1|--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the group of the immediate parent group"
}
}
,
"create"
:
{
"#desc"
:
"Create subgroups"
,
"--parent_id"
:
{
"#desc"
:
"parent groups id."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--subgroup_path"
:
{
"#desc"
:
"subgroup path"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--name"
:
{
"#desc"
:
"subgroup name"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
}
}
,
"issue"
:
{
"#desc"
:
"issue manage"
,
"ls"
:
{
"#desc"
:
"issue list"
,
"--assignee_id"
:
{
"#desc"
:
"Return issues assigned to the given user id."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_username"
:
{
"#desc"
:
"Return issues assigned to the given username."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_id"
:
{
"#desc"
:
"Return issues created by the given user id."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--author_username"
:
{
"#desc"
:
"Return issues created by the given username."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_after"
:
{
"#desc"
:
"Return issues created on or after the given time. Expected in ISO 8601 format"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_before"
:
{
"#desc"
:
"Return issues created on or before the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"Return issues that have no due date,are overdue,or whose due date is this week,this month,or between two weeks ago and next month"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"Return issues associated with the given epic ID."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iids"
:
{
"#desc"
:
"Return only the issues having the given iid"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--in"
:
{
"#desc"
:
"Modify the scope of the search attribute. title, description, or a string joining them with comma. Default is title,description"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"Filter to a given type of issue. One of issue, incident, or test_case."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_id"
:
{
"#desc"
:
"Return issues assigned to the given iteration ID."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iteration_title"
:
{
"#desc"
:
"Return issues assigned to the iteration with the given title."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated list of label names, issues must have all labels to be returned. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone"
:
{
"#desc"
:
"The milestone title. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"Returns issues assigned to milestones with a given timebox value (None, Any, Upcoming, and Started). "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--my_reaction_emoji"
:
{
"#desc"
:
"Return issues reacted by the authenticated user by the given emoji. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--not"
:
{
"#desc"
:
"Return issues that do not match the parameters supplied. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--order_by"
:
{
"#desc"
:
"Return issues ordered by created_at,due_date,label_priority,milestone_due,popularity,priority,relative_position,title, updated_at,or weight fields.Default is created_at"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--scope"
:
{
"#desc"
:
"Return issues for the given scope:"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--sort"
:
{
"#desc"
:
"Return issues sorted in asc or desc order. Default is desc"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--search"
:
{
"#desc"
:
"Search issues against their title and description"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state"
:
{
"#desc"
:
"Return all issues or just those that are opened or closed"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_after"
:
{
"#desc"
:
"Return issues updated on or after the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_before"
:
{
"#desc"
:
"Return issues updated on or before the given time."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"Return issues with the specified weight."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Filter confidential or public issues."
}
,
"--non_archived"
:
{
"#desc"
:
"Return issues only from non-archived projects.If false,the response returns issues from both archived and non-archived projects.Default is true"
}
,
"--with_labels_details"
:
{
"#desc"
:
"If true, the response returns more details for each label in labels field: :name, :color, :description, :description_html,:text_color.Default is false."
}
}
,
"create"
:
{
"#desc"
:
"create issue"
,
"--id"
:
{
"#desc"
:
"The ID or URL-encoded path of the project owned by the authenticated user"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"The title of an issue "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--iid"
:
{
"#desc"
:
"The internal ID of the project issue (requires administrator or project owner rights)"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--created_at"
:
{
"#desc"
:
"When the issue was created. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"The type of issue. One of issue, incident, or test_case. Default is issue."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"The due date."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The description of an issue. Limited to 1,048,576 characters."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_id"
:
{
"#desc"
:
"The ID of the user to assign the issue to. Only appears on gcode Free."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The IDs of the users to assign the issue to."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--discussion_to_resolve"
:
{
"#desc"
:
"The ID of a discussion to resolve"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"ID of the epic to add the issue to. Valid values are greater than or equal to 0."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_iid"
:
{
"#desc"
:
"IID of the epic to add the issue to. Valid values are greater than or equal to 0. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated label names for an issue"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--merge_request_to_resolve_discussions_of"
:
{
"#desc"
:
"The IID of a merge request in which to resolve all issues.  "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The gcodeobal ID of a milestone to assign issue. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"The weight of the issue. Valid values are greater than or equal to 0."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Set an issue to be confidential. Default is false"
}
}
,
"update"
:
{
"#desc"
:
"update issue"
,
"--add_labels"
:
{
"#desc"
:
"Comma-separated label names to add to an issue."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--assignee_ids"
:
{
"#desc"
:
"The IDs of the users to assign the issue to."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--description"
:
{
"#desc"
:
"The description of an issue. Limited to 1,048,576 characters."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--due_date"
:
{
"#desc"
:
"The due date."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_id"
:
{
"#desc"
:
"ID of the epic to add the issue to. Valid values are greater than or equal to 0."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--epic_iid"
:
{
"#desc"
:
"IID of the epic to add the issue to. Valid values are greater than or equal to 0. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--project"
:
{
"#desc"
:
"The ID or URL-encoded path of the project owned by the authenticated user"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_iid"
:
{
"#desc"
:
"The internal ID of a project issue"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_type"
:
{
"#desc"
:
"The type of issue. One of issue, incident, or test_case. Default is issue."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--labels"
:
{
"#desc"
:
"Comma-separated label names for an issue"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--milestone_id"
:
{
"#desc"
:
"The gcodeobal ID of a milestone to assign issue. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--remove_labels"
:
{
"#desc"
:
"Comma-separated label names to remove from an issue. "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--state_event"
:
{
"#desc"
:
"The state event of an issue. Set close to close the issue and reopen to reopen it "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--title"
:
{
"#desc"
:
"The title of an issue "
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--updated_at"
:
{
"#desc"
:
"When the issue was updated. Date time string, ISO 8601 formatted,"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--weight"
:
{
"#desc"
:
"The weight of the issue. Valid values are greater than or equal to 0."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--confidential"
:
{
"#desc"
:
"Updates an issue to be confidential"
}
,
"--discussion_locked"
:
{
"#desc"
:
"Flag indicating if the issue discussion is locked If the discussion is locked only project members can add or edit comments."
}
}
,
"rm"
:
{
"#desc"
:
"delete issue"
,
"--project"
:
{
"#desc"
:
"The ID or URL-encoded path of the project owned by the authenticated user."
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
,
"--issue_iid"
:
{
"#desc"
:
"The internal ID of a project issue"
,
"#arguments_str"
:
" <>"
,
"#1"
:
{
"#desc"
:
""
}
}
}
}
,
"space"
:
{
"#desc"
:
"name space manage"
,
"ls"
:
{
"#desc"
:
"List namespace of owner"
}
}
,
"token"
:
{
"#desc"
:
"set token"
}
}
