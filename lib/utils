# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 2: Wrapping std/http module with object naming changing
############################
___x_cmd_gcode_resp_header(){
    O="${O:-___X_BASH_HTTP____x_cmd_gcode_GCODE_DEFAULT}" ___x_cmd_http_resp header "$@"
}

# TODO: Not supported yet
___x_cmd_gcode_resp_body(){
    O="${O:-___X_BASH_HTTP____x_cmd_gcode_GCODE_DEFAULT}" ___x_cmd_http_resp body "$@"
}

___x_cmd_gcode_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gcode_http get "$@" page per_page
        return
    fi
    local tmp
    tmp=$(mktemp)
    ___x_cmd_gcode_http get "$@" page=1 per_page=100 >> "$tmp"
    local next_url
    _____x_cmd_gcode_next_url
    if [ -z "$next_url" ];then
        cat "$tmp"
        rm "$tmp"
        return
    fi
    while [ -n "$next_url" ]; do
        ___x_cmd_gcode_http get "$next_url" >> "$tmp"
        _____x_cmd_gcode_next_url
    done
    x ja 'BEGIN{print "["} END{print "]"}O[1]{
    if ((V == "}") || (V == "]") || (K ~ "^[0-9]+$")) print V
    else print K ": "V;
    }' < "$tmp" | x jo fmt
    rm "$tmp"
}

_____x_cmd_gcode_next_url(){
    next_url="$(___x_cmd_gcode_resp_header "link")"
    next_url="${next_url#*'rel="prev", <'}"
    local tmp_url="${next_url%%'>; rel="next"'*}"
    if [ "$next_url" != "$tmp_url" ];then
         next_url="${tmp_url#*'api/v4'*}"
    else
        next_url=""
    fi
}

___x_cmd_gcode_http(){
    if ! O="${O:-___x_cmd_gcode_GCODE_DEFAULT}" ___x_cmd_http header get Content-Type 1>/dev/null 2>&1; then
         O="${O:-___x_cmd_gcode_GCODE_DEFAULT}" ___x_cmd_http header put Content-Type application/json
    fi
    O="${O:-___x_cmd_gcode_GCODE_DEFAULT}" ___x_cmd_http "$@"
}

############################
# Section 3: Parameter Utilities
############################

alias ___x_cmd_gcode_param_init_owner_project='
    local owner_project
    ___x_cmd_gcode_param_normalize_repo  || return
'

___x_cmd_gcode_param_normalize_repo(){
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_project="$(printf "%s" "$op")"
        ;;
    "")
        owner_project="$(_____x_cmd_git_repo)"
        ;;
    *)
        ___x_cmd_gcode_current_owner 1>/dev/null
        if [ -z "$___X_CMD_GCODE_DEFAULT_OWNER" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
        fi
        owner_project="$(printf "%s" "$___X_CMD_GCODE_DEFAULT_OWNER/$op")"
        ;;
    esac
    printf "%s" "$owner_project" | sed s:'/':'%2F':g
}

### Repo #1

___x_cmd_gcode_parse_owner_repo(){
    local O="${O:-___x_cmd_gcode_GCODE_DEFAULT}"
    if [ -z "$repo" ]; then
        repo="$(___x_cmd_gcode_current_repo)"
    fi
    # if [[ "$repo" = */* ]]; then
    if str_regex "$repo" "/"; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
    if [ -z "$owner" ]; then
        owner="$(___x_cmd_gcode_current_owner)"
    fi
}

___x_cmd_gcode_default(){
    param_default "$@" 2>/dev/null || return 1
}

_____x_cmd_git_repo(){
    local repo
    repo="$(git config --get remote.origin.url 2>/dev/null)"
    repo="${repo##*".com:"}"
    repo="${repo##*".com/"}"
    repo="${repo%.*}"
    printf "%s" "$repo"
}

___gcode_ui_mutual() {
    local tmp="$1"
    shift 1
    if [ -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        if ! eval "$tmp -- \$@"  && [ -n "$___gh_error_msg" ]; then
            ___x_cmd_ui_tf false "$___gh_error_msg"
            return 1
        fi
    else
        "$@"
    fi
    return
}