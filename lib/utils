# shellcheck shell=sh
# shellcheck disable=SC2039,3043
# shellcheck disable=SC2046

# Section: HTTP header & body & request
___x_cmd_gcode_resp_header(){
   cat "$___X_CMD_ROOT_TMP/gcode/.____x_cmd_gcode_curl_header"
}

# TODO:HTTP CODE
______x_cmd_gcode_resp_header_code(){
    ___x_cmd_gcode_resp_header  | awk '$1 ~/HTTP\/1.1$/ {print ($2+0);exit(0)}'
}

___x_cmd_gcode_curl(){
    local op="$1"
    local url="\"https://gitcode.net/api/v4$2\""
    local gcode_header="$___X_CMD_ROOT_TMP/gcode/.____x_cmd_gcode_curl_header"
    local Type="\"Content-Type: application/json\""
    local Authorization
    Authorization="\"PRIVATE-TOKEN: $(___x_cmd_gcode_token)\""
    shift 2
    local req
    case "$op" in
        get)
            gcode_log debug           "eval x curl -D  $gcode_header   -X GET -s -H  $Type  -H  $Authorization  $(eval "printf '%s ' $(x curl gencode -G $([ $# -eq 0 ] || printf "%s== " "$@"))")  $url"
            x ccmd 3m --            eval x curl -D "$gcode_header"  -X GET -s -H "$Type" -H "$Authorization" $(eval "printf '%s ' $(x curl gencode -G $([ $# -eq 0 ] || printf "%s== " "$@"))") "$url"
            ___x_cmd_gcode_http_error  eval x curl -D "$gcode_header"  -X GET -s -H "$Type" -H "$Authorization" $(eval "printf '%s ' $(x curl gencode -G $([ $# -eq 0 ] || printf "%s== " "$@"))") "$url"
            return
            ;;
        post)
            req="POST";;
        put)
            req="PUT";;
        patch)
            req="PATCH";;
        delete)
            req="DELETE";;
    esac
    gcode_log debug "eval x curl -D $gcode_header -X $req    -s -H $Type -H $Authorization $(x curl gencode "$@") $url"

    eval x curl -D "$gcode_header" -X "$req"    -s -H "$Type" -H "$Authorization" "$(x curl gencode "$@")" "$url"
}

___x_cmd_gcode_http_error(){
    local http_resp_code
    http_resp_code=$(______x_cmd_gcode_resp_header_code)
    if [ -n "$http_resp_code" ] && [ "$http_resp_code" -ge 200 ] && [ "$http_resp_code" -le 303 ]; then
        return 0
    else
        [ $# -eq 0 ] || x ccmd invalidate "$@" >/dev/null
        gcode_log error "HTTP Code Is $http_resp_code"
        return 1
    fi
}
# EndSection

# Section: pagination
___x_cmd_gcode_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gcode_curl get "$@" page per_page
        return
    fi

    local page=1
    local per_page=100
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ]; then
        ___x_cmd_gcode_get_multi___json_prt "$@"
    else
        ___x_cmd_gcode_get_multi___ui_table "$@"
    fi

}

___x_cmd_gcode_get_multi___ui_table(){
    ___x_cmd_gcode_curl get "$@" page per_page
    printf "\n"
    local next_url
    _____x_cmd_gcode_next_url
    [ -n "$next_url" ] || return

    while [ -n "$next_url" ]; do
        ___x_cmd_gcode_curl get "$next_url"
        printf "\n"
        _____x_cmd_gcode_next_url
    done
}

___x_cmd_gcode_get_multi___json_prt(){
    local tmp
    tmp=$(mktemp)
    ___x_cmd_gcode_curl get "$@" page per_page > "$tmp"
    printf "\n" >> "$tmp"

    local next_url
    _____x_cmd_gcode_next_url
    if [ -z "$next_url" ]; then
        cat "$tmp"
        rm "$tmp"
        return
    fi

    while [ -n "$next_url" ]; do
        ___x_cmd_gcode_curl get "$next_url" >> "$tmp"
        printf "\n" >> "$tmp"
        _____x_cmd_gcode_next_url
    done
    < "$tmp" x jo q0 \*.\* . | awk 'BEGIN{ print "["}
        END{ print "]"}
        {
            if ($0 == "") next
            if ((NR != 1) && ( aaa == 0 )) print ","
            if (($0 == "{") || ( $0 == "[")) aaa++
            if (($0 == "}") || ( $0 == "]")) aaa--
            print $0
        }'
    rm "$tmp"
}

_____x_cmd_gcode_next_url(){
    next_url="$(grep "link:" "$___X_CMD_ROOT_TMP/gcode/.____x_cmd_gcode_curl_header")"
    next_url="${next_url#*'rel="prev", <'}"
    local tmp_url="${next_url%%'>; rel="next"'*}"
    if [ "$next_url" != "$tmp_url" ];then
         next_url="${tmp_url#*'api/v4'*}"
    else
        next_url=""
    fi
}
# EndSection

# Section 3: Parameter Utilities
alias ___x_cmd_gcode_param_init_owner_project='
    local owner_project
    ___x_cmd_gcode_param_normalize_repo  || return
'

___x_cmd_gcode_param_normalize_repo(){
    local op="$project"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_project="$(printf "%s" "$op")"
        ;;
    "")
        owner_project="$(_____x_cmd_git_repo)"
        ;;
    *)
        ___x_cmd_gcode_current_owner 1>/dev/null
        if [ -z "$___X_CMD_GL_DEFAULT_OWNER" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
        fi
        owner_project="$(printf "%s" "$___X_CMD_GL_DEFAULT_OWNER/$op")"
        ;;
    esac
    owner_project="$(printf "%s" "$owner_project" | sed s:'/':'%2F':g)"
}

_____x_cmd_git_repo(){
    local repo
    repo="$(git config --get remote.origin.url 2>/dev/null)"
    repo="${repo##*".com:"}"
    repo="${repo##*".com/"}"
    repo="${repo%.*}"
    printf "%s" "$repo"
}

___gcode_ui_mutual() {
    local tmp="$1"
    shift 1
    if [ -n "$json" ] || [ -n "$ENFORCE_JSON" ] ; then
        ENFORCE_JSON=1 "$@"
    else
        # run ui table
        eval "$tmp"
    fi
    return
}
# EndSection
