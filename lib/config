# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gcode_config(){
    param:subcmd ___x_cmd_gcode_config                                        \
        which       "Show current config path"                             \
        get         "Print the value of a given configuration key"         \
        set         "Update configuration with a value for the given key"
    param:subcmd:try
    param:run

    ___x_cmd_gcode_config _param_help_doc

    return 1
}

___x_cmd_gcode_config_which(){
    param:void
    printf "%s\n" "${___X_CMD_ROOT}/.config/x-bash/app.gitlab.config/___x_cmd_gcode_GITLAB_DEFAULT"
}

___x_cmd_gcode_config_get(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
type:
    ConfigName  =   oauth_token user git_protocol
options:
    --host        "host name"                               <>="gitlab.com"
    #1            "The name of the configuration to get"    <>:ConfigName
'
    param:run
    [ -e  "${___X_CMD_ROOT}/.config/x-bash/app.gitlab.config/___x_cmd_gcode_GITLAB_DEFAULT" ] || return 1
    ___x_cmd_git_config_get "${___X_CMD_ROOT}/.config/x-bash/app.gitlab.config/___x_cmd_gcode_GITLAB_DEFAULT" "$host" "$1"
}

___x_cmd_gcode_config_set(){
    param:scope     ___x_cmd_gcode
    param:dsl       '
type:
    ConfigName  =   oauth_token user git_protocol
options:
    --host    "host name"                             <>="gitlab.com"
    #1        "Please provide configuration key"      <>:ConfigName
    #2        "Please provide configuration val"      <>
'
    param:run
    local ___gitlab_path="${___X_CMD_ROOT}/.config/x-bash/app.gitlab.config"
    [ -d  "$___gitlab_path" ] || mkdir -p "$___gitlab_path"
    ___gitlab_path="$___gitlab_path/___x_cmd_gcode_GITLAB_DEFAULT"
    ___x_cmd_git_config_set "$___gitlab_path" "$host" "$1" "$2" && ___x_cmd_ui_tf true "set config successfully" && return 0
    gcode_log error "gcode config set Fail"
}
