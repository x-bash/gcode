# shellcheck shell=sh
# shellcheck disable=SC2039,3043,2016


test_gcode_project_bracnh_ls(){
    local project_path="gcode"
    local branch="gcode"
    @assert stdout eval 'x gcode project branch ls --json --project "$project_path" --per_page "1" --page "1" --search "$branch" | x jo . .1.name'<<A
"$branch"
A

    NO_COLOR=1 @assert stdout x gcode project branch ls --project "$project_path" --per_page "1" --page "1" --search "$branch" <<A
BranchName   Protected   Default   LastCommit   
gcode        false       false     95eabc5c     


A

    @assert stdout x gcode project branch ls --json --project "$project_path" --per_page "100" --page "2" <<A
[]
A

    NO_COLOR=1 @assert stdout x gcode project branch ls --project "$project_path" --per_page "100" --page "2" <<A
BranchName   Protected   Default   LastCommit   


A
}


test_gcode_project_branch_info(){
    local project_path="gcode"
    local branch="master"
    @assert stdout eval 'x gcode project branch info --json --project "$project_path" "$branch" | x jo . .name'<<A
"$branch"
A

    NO_COLOR=1 @assert stdout eval 'x gcode project branch info --project "$project_path" "$branch" | awk '\''
NR==2{
    print match($0, " - Name:" " [A-Za-z0-9]{1}[A-Za-z0-9_-]+{1,37}[A-Za-z0-9]{1}" )
}
NR==3{
    print match($0, " - Protected:" " [A-Za-z0-9]{1}[A-Za-z0-9_-]+{1,37}[A-Za-z0-9]{1}" )
}
NR==4{
    print match($0, " - Merged:" " [A-Za-z0-9]{1}[A-Za-z0-9_-]+{1,37}[A-Za-z0-9]{1}" )
}
NR==5{
    print match($0, " - LastCommit:" " [A-Za-z0-9]{1}[A-Za-z0-9_-]+{1,37}[A-Za-z0-9]{1}" )
}
NR==6{
    print match($0, " - Url: (https)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[.][a-z][a-z][a-z]?[a-z]?[a-z]?[a-z]?(/[-A-Za-z0-9+&@#/%=~_|]*)?" )
}
'\'' ' << A
1
1
1
1
1
A

    @assert stdout eval 'x gcode project branch info --json --project "$project_path" "err$branch" | x jo .message'<<A
"404 Branch Not Found"
A

    NO_COLOR=1 @assert stdout x gcode project branch info --project "$project_path" "err$branch"  <<A
X get repo $project_path branch info fail
 - ErrorMsg:{"message":"404 Branch Not Found"}
A
}

test_gcode_project_branch_default(){
    local project_path="gcode"
    local branch="master"
    @assert stdout eval 'x gcode project branch default --json --project "$project_path" "$branch" | x jo . .path .default_branch'<<A
"$project_path"
"$branch"
A

#     NO_COLOR=1 @assert stdout x gcode project branch default --project "$project_path" "$branch" << A
# ✔ Successfully set repo default branch
# A

    @assert stdout eval 'x gcode project branch default --json --project "$project_path" "err$branch" | x jo .message'<<A
{"base":["无法更改HEAD：分支“err$branch”不存在"]}
A

    NO_COLOR=1 @assert stdout x gcode project branch default --project "$project_path" "err$branch"  <<A
X Failed to set repo default branch
 - ErrorMsg:{"message":{"base":["无法更改HEAD：分支“err$branch”不存在"]}}
A
}

test_gcode_project_bracnh_protection_ls(){
    local project_path="gcode"
    local branch="master"
    @assert stdout eval 'x gcode project branch protection ls --json --project "$project_path" --search "$branch" | x jo . .1.name'<<A
"$branch"
A

    NO_COLOR=1 @assert stdout x gcode project branch protection ls --project "$project_path" --search "$branch" <<A
BranchName   allow_force_push   code_owner_approval_required   
master                                                         


A

    @assert stdout x gcode project branch protection ls --json --project "$project_path" --search "err$branch" <<A
[]
A

    NO_COLOR=1 @assert stdout x gcode project branch protection ls --project "$project_path" --search "err$branch" <<A
BranchName   allow_force_push   code_owner_approval_required   


A
}

test_gcode_project_bracnh_protection_info(){
    local project_path="gcode"
    local branch="master"
    @assert stdout eval 'x gcode project branch protection info --json --project "$project_path" "$branch" | x jo . .name'<<A
"$branch"
A

#     NO_COLOR=1 @assert stdout x gcode project branch protection info --project "$project_path" "$branch"  << A
# ✔ get repo gcode protection branch info success
# A

    @assert stdout eval 'x gcode project branch protection info --json --project "$project_path" "err$branch" | x jo .message'<<A
"404 Not found"
A

    NO_COLOR=1 @assert stdout x gcode project branch protection info --project "$project_path" "err$branch"  <<A
X get repo $project_path protection branch info fail
 - ErrorMsg:{"message":"404 Not found"}
A
}

test_gcode_project_bracnh_protection_set(){
    local project_path="gcode"
    local branch="gcode"
    local uibranch="gtest"
    @assert stdout eval 'x gcode project branch protection set --json --project "$project_path" "$branch" --push_access_level "40" --merge_access_level "40" \
    --unprotect_access_level "40" | x jo . .name .push_access_levels.1.access_level .merge_access_levels.1.access_level' <<A
"$branch"
40
40
A

#     NO_COLOR=1 @assert stdout x gcode project branch protection set --project "$project_path" "$uibranch"<< A
# ✔ set protection branch success
# A

    @assert stdout eval 'x gcode project branch protection set --json --project "$project_path" --merge_access_level 22 "$branch" | x jo .error'<<A
"merge_access_level does not have a valid value"
A

#     NO_COLOR=1 @assert stdout x gcode project branch protection set --project "$project_path" --merge_access_level 22 "$branch"  <<A
# X get repo projects branch info fail
#  - ErrorMsg:{"message":"404 Branch Not Found"}
# A
}

test_gcode_project_bracnh_protection_unset(){
    local project_path="gcode"
    local branch="gcode"
    local uibranch="gtest"
    x gcode project branch protection unset --project "$project_path" "$branch"
    @assert stdout echo $? <<A
0
A

#     NO_COLOR=1 @assert stdout x gcode project branch protection unset --project "$project_path" "$uibranch" <<A
# ✔ del $uibranch branch protection success
# A

    x gcode project branch protection unset --project "$project_path" "err$branch"
    @assert stdout echo $? <<A
1
A

    NO_COLOR=1 @assert stdout x gcode project branch protection unset --project "$project_path" "err$branch" <<A
X del err$branch branch protection fail
 - ErrorMsg:{"message":"404 Not found"}
A
}

# @assert:file:func
